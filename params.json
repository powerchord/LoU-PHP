{"body":"LoU-PHP\r\n=======\r\n\r\n#### Version 0.1.0\r\n\r\n## Description\r\n\r\nLoU-PHP is an opensourced class that provides basic methods for connecting, authenticating, and retrieving data from [Lord of Ultima](http://www.lordofultima.com).\r\n\r\n## Requirements\r\n\r\nLoU-PHP requires the [Simple HTML DOM Parser](http://simplehtmldom.sourceforge.net/) library which is included in this GitHub project directory for your convenience. The file must be located within the same directory as the classfile.\r\n\r\n## Usage\r\n\r\nBefore you start, you need to\r\n\r\n* create a writable directory for storage of cookie files\r\n* know the LoU account info (email, password, world id)\r\n\r\n### Connecting to LoU\r\n\r\nThis class is extremely basic providing only the minimal methods needed for connecting to LoU and retrieving data from the LoU API. To login to a LoU server:\r\n\r\n```php\r\n\r\n$lou = LoU::createClient('path/to/cookie/directory');\r\n$lou->login('myemail@domain.com', 'mypassword');\r\n```\r\n\r\nThis will authenticate with LoU and populate a list of available servers. That server list can be shown like this:\r\n\r\n```php\r\n\r\nforeach( $lou->server_list as $world )\r\n{\r\n    echo 'ID: ' . $world->id . '<br>';\r\n    echo 'Name: ' . $world->name . '<br>';\r\n    echo 'URL: ' . $world->server . '<br>';\r\n}\r\n```\r\n\r\nThere are several ways of selecting a LoU world and retrieving a valid session key. This allows you to connect to a world with one simple step:\r\n\r\n```php\r\n\r\n// Method 1\r\n$lou = LoU::createClient('path/to/cookie/directory');\r\n$lou->setWord(74)->login('myemail@domain.com', 'mypassword')\r\n\r\n// Method 2\r\n$lou = LoU::createClient('path/to/cookie/directory');\r\n$lou->login('myemail@domain.com', 'mypassword')->selectWorld(74);\r\n```\r\n\r\nOr you can first login and display a list of worlds for a user to choose from and then select the world:\r\n\r\n````php\r\n\r\n$lou = LoU::createClient('path/to/cookie/directory');\r\n$lou->login('myemail@domain.com', 'mypassword');\r\n\r\nforeach( $lou->server_list as $world )\r\n{\r\n    echo 'ID: ' . $world->id . '<br>';\r\n    echo 'Name: ' . $world->name . '<br>';\r\n    echo 'URL: ' . $world->server . '<br>';\r\n}\r\n\r\n// Controls for user selection here\r\n\r\n$lou->selectWorld($user_choice);\r\n```\r\n\r\n### Retrieving Data\r\n\r\nThere are two methods for retrieving data from LoU. The first method involves providing an EndPoint and any necessary data:\r\n\r\n```php\r\n\r\n// Retrieve public information for the given player id\r\n$data = $lou->get( 'GetPublicPlayerInfo', array( 'id' => '1234567' ) );\r\n\r\n// Retrieve public information for the given city id\r\n$data = $lou->get( 'GetPublicCityInfo', array( 'id' => '1234567' ) );\r\n```\r\n\r\nThis method is for retrieving information via the Poll EndPoint:\r\n\r\n```php\r\n\r\n// Retrieve current list of incoming attacks\r\n$data = $lou->poll( array( 'ALL_AT' => '' ) );\r\n\r\n// Retrieve private information of the authenticated user's city\r\n$data = $lou->poll( array( 'CITY' => '1234567' ) );\r\n\r\n// Retrieve time information from the server\r\n$data = $lou->poll( array( 'TIME' => time() ) );\r\n```\r\n\r\n## What's Next?\r\n\r\nThere are many endpoints used in LoU for sending commands and retrieving data. I'll leave that for you to explore. I do plan on extending this library with more classes providing simple methods for retrieving data.\r\n\r\n### Todo\r\n\r\nI have not been able to decode the data needed to request World Map info. If anybody can help me figure this out, I would be forever grateful. From my best understanding it is encoded using basE91 LE with the following cipher:\r\n\r\n```php\r\n\r\n$cipher = array (\r\n    'A' => 0, 'B' => 1, 'C' => 2, 'D' => 3, 'E' => 4, 'F' => 5, 'G' => 6, 'H' => 7, 'I' => 8, 'J' => 9, 'K' => 10, 'L' => 11, 'M' => 12, 'N' => 13, 'O' => 14, 'P' => 15, 'Q' => 16, 'R' => 17,\r\n    'S' => 18, 'T' => 19, 'U' => 20, 'V' => 21, 'W' => 22, 'X' => 23, 'Y' => 24, 'Z' => 25, 'a' => 26, 'b' => 27, 'c' => 28, 'd' => 29, 'e' => 30, 'f' => 31, 'g' => 32, 'h' => 33, 'i' => 34,\r\n    'j' => 35, 'k' => 36, 'l' => 37, 'm' => 38, 'n' => 39, 'o' => 40, 'p' => 41, 'q' => 42, 'r' => 43, 's' => 44, 't' => 45, 'u' => 46, 'v' => 47, 'w' => 48, 'x' => 49, 'y' => 50, 'z' => 51,\r\n    '0' => 52, '1' => 53, '2' => 54, '3' => 55, '4' => 56, '5' => 57, '6' => 58, '7' => 59, '8' => 60, '9' => 61, '!' => 62, '#' => 63, '$' => 64, '%' => 65, '&' => 66, '(' => 67, ')' => 68,\r\n    '*' => 69, '+' => 70, ',' => 71, '.' => 72, ' ' => 73, ':' => 74, ';' => 75, '<' => 76, '=' => 77, '>' => 78, '?' => 79, '@' => 80, '[' => 81, ']' => 82, '^' => 83, '_' => 84, '`' => 85,\r\n    '{' => 86, '|' => 87, '}' => 88, '~' => 89, '\\'' => 90\r\n);\r\n```\r\n\r\n### Changelog\r\n\r\n* 10/14/12 - Converted class to singleton pattern in preperation for additional classes.\r\n\r\n## License\r\n\r\nCopyright 2012, Roger Mayfield\r\n\r\nThis library is released under the [GNU General Public License](http://opensource.org/licenses/gpl-3.0.html)\r\n\r\n## Disclaimer\r\n\r\nAlthough using this class for data retrieval is not prohibited by the [Lord of Ultima Terms of Service](http://www.lordofultima.com/en/game/rules), it is against the rules to automate the game using the methods contained within it. You are liable for your own applications of this library. I am not responsible for any bans that may occur.","name":"Lou-php","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","tagline":"A simple class for connecting and sending requests to Lord of Ultima."}